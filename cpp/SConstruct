import os
from protoc import *
env = Environment()

# env.Append(CXX=["g++-4.1"], 
#            CPPFLAGS=['-Werror','-Wall','-g', '-fstack-protector-all'])

env.Append(CXX=["g++-4.1"], 
           CPPFLAGS=['-Werror','-Wall','-O2', '-DNDEBUG'])

#env['BUILDERS']['Protoc'] = Builder(action = ProtocBuilder)
generate(env)
proto = env.Protoc(
    [],
    "speech.proto",
    # PROTOCPROTOPATH=['.',r'C:\wc\protobuf-trunk\src',],
    PROTOCPYTHONOUTDIR='build', # set to None to not generate python
    PROTOCOUTDIR = 'build' # defaults to same directory as .proto
    # # PROTOCCPPOUTFLAGS = "dllexport_decl=PROTOCONFIG_EXPORT:", too 
)

semi = env.Library('semi',
                   ['semimarkov.cpp'])

viterbi = env.Library('viterbi',
                      ['viterbi.cpp'])

speech = env.Library('speech',
                     ['speech.cpp', proto])

span = env.Library('span_chart',
                   ['span_chart.cpp'])

distance = env.Library('distance',
                       ['distances.cpp'], LIBS =[span])

#'cluster_subgrad.cpp',
cluster = env.Library('cluster',
                      ['cluster_problem.cpp', 'subgrad.cpp', 'hidden_presolve.cpp', 
                       'hidden_solver.cpp',
                       'hidden_kmedian_solver.cpp',
                       'kmedians.cpp',
                       'hop_solver.cpp',
                       'recenter_solver.cpp',
                       'hmm_solver.cpp', 'hmm_viterbi_solver.cpp', "speech_kmeans.cpp", "speech_solution.cpp", "speech_subgrad.cpp", span, semi, proto, distance, viterbi],
                      
LIBS = [span, semi, proto, distance, viterbi, "gurobi45", "gurobi_c++"])

speech_solve = env.Library('speech_solve',
                           ["speech_problem.cpp", speech, distance, cluster, span, semi, viterbi],
                           LIBS = [speech, distance, cluster, span, semi, viterbi])

env.Append(LIBPATH =('.', "/home/alexanderrush/libs/gurobi452/linux64/lib"))
env.Append(CPPPATH =('.', "/home/alexanderrush/libs/gurobi452/linux64/include"))

lp = env.Library('alignment_lp',
                 ['alignment_lp.cpp'], LIBS =[speech_solve, "gurobi45", "gurobi_c++"])

env.Program('semi_test', 
            ['semimarkov_test.cpp', semi],
            LIBS =["gtest"])

# env.Program('distances_test', 
#             ['distances_test.cpp', distance],
#             LIBS =["gtest"])

# env.Program('main', 
#             ['run.cpp', distance, speech_solve, viterbi],
#             LIBS =["gtest", "protobuf", "pthread", distance, speech, 
#                    speech_solve, cluster, span, semi, viterbi])

# env.Program('main2', 
#             ['run_viterbi.cpp', distance, speech_solve, viterbi],
#             LIBS =["gtest", "protobuf", "pthread", distance, speech, 
#                    speech_solve, cluster, span, semi, viterbi])

env.Program('main_mplp', 
            ['run_mplp.cpp', distance, speech_solve, viterbi, lp, cluster],
            LIBS =["gtest", "protobuf", "pthread", "gurobi45", "gurobi_c++", "gflags", distance, speech, 
                   speech_solve, cluster, span, semi, viterbi, lp])

env.Program('test_kmedians', 
            ['test_kmedians.cpp', "kmedians.cpp"],
            LIBS =["gtest", "protobuf", "pthread", "gurobi45", "gurobi_c++", "gflags" ])
